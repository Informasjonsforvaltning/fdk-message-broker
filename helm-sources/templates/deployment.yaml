apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    fdk.service: rabbitmq
  name: rabbitmq
  namespace: {{ required "Missing value NAMESPACE" .Values.NAMESPACE }}
spec:
  replicas: 1
  selector:
    matchLabels:
      fdk.service: rabbitmq
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        fdk.service: rabbitmq
    spec:
      containers:
        - image: {{ required "Missing value FDK_RABBITMQ_IMAGE" .Values.FDK_RABBITMQ_IMAGE }}
          imagePullPolicy: Always
          name: rabbitmq
          env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: common-{{ required "Missing value NAMESPACE" .Values.NAMESPACE }}
                  key: RABBITMQ_USERNAME
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: common-{{ required "Missing value NAMESPACE" .Values.NAMESPACE }}
                  key: RABBITMQ_PASSWORD
          ports:
            - containerPort: 5672
            - containerPort: 15672
          resources:
            requests:
              memory: {{ required "Missing value FDK_RABBITMQ_MEMORY" .Values.FDK_RABBITMQ_MEMORY | quote }}
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: rabbitmq-claim1
      restartPolicy: Always
      volumes:
        - name: rabbitmq-claim1
          persistentVolumeClaim:
            claimName: rabbitmq-claim1
status: {}